#+title: guix-config

* Introduction

These are my [[https://guix.gnu.org][GNU Guix]] configuration files.

This config extends Guix with a custom data type (dubbed "mods") to modularize
my setup.  It also includes some additional packages and services that are
either being refined for upstreaming or are not suitable for upstream.

* Overview

Here is a general overview of notable files in this repository:

- [[file:files]] contains configuration files that are not declared in Guile
  modules.
- [[file:modules]] contains Guile modules, where packages, services, and other
  utilities are defined.  =GUIX_PACKAGE_PATH= is set to this directory.
- [[file:systems]] and [[file:modules/my-guix/systems]] are where the top-level Guix
  System/Home configuration files for my systems are located.
- [[file:scripts/setup]] is used for setting up additional things that the installer
  does not offer to do.
- [[file:scripts/guix]] is used for bootstrapping the configuration when
  =GUIX_PACKAGE_PATH= is not set yet.


The following sections include documentation for various services and interfaces
provided by the Guile modules.

* Mods

The ~(my-guix mods)~ module implements "mods", an extension to Guix records
that can be used to modularize configurations; in this case, particularly
~operating-system~ and ~home-environment~ configurations.

A simple use case might be to group various related packages or services
together.  For instance, the ~file-system-management-mod~ in this repository
is defined like so:
#+begin_src scheme
  (define file-system-management-mod
    (operating-system-mod
      (name 'file-system-management)
      (description
       "Provides software to support various file system operations and disk
  management/maintenance.")
      (packages (let-mod-arguments (this-operating-system-mod-arguments)
                    ((replace-mesa replace-mesa-argument))
                  (list btrfs-progs
                        cryptsetup
                        (replace-mesa gnome-disk-utility)
                        gparted
                        gptfdisk
                        lvm2
                        ntfs-3g)))
      (services (list (service fstrim-service-type)))))
#+end_src
(From [[file:modules/my-guix/mods/base.scm]].)

To use mods, configurations are stored in a ~modded-configuration~ record
type, and then be converted to records that Guix expects using
~modded-configuration-operating-system~ or
~modded-configuration-home-environment~ for the system and home environments,
respectively.  This produces top-level configurations that look something like
the following:

#+begin_src scheme
  ;; Machine-specific configurations can still be included here.
  (define base-operating-system
    (operating-system
      ...))

  (define modded-operating-system
    (modded-configuration
      ...
      (base base-operating-system)
      ;; meta-desktop-mod includes file-system-management-mod.
      (mods (list meta-desktop-mod
                  meta-entertainment-mod
                  gnome-mod
                  nvidia-mod
                  ssh-server-mod))))

  ...

  ;; Return an operating-system record for guix system reconfigure.
  (modded-configuration-operating-system modded-operating-system)
#+end_src
(From [[file:modules/my-guix/systems/al-pc.scm]] and [[file:systems/al-pc.scm]].)

Specifications for the relevant facilities are documented below (WIP).

# TODO: document specifications.

The ~(my-guix mods)~ module provides abstractions for implementing mods and
top-level configurations.

- Data Type: modded-configuration ::
  Fields:
  - =arguments= ::
  - =base= ::
  - =mods= ::


~(my-guix mods)~ also includes an implementation of mods for the
~operating-system~ record.

- Data Type: operating-system-mod ::
  Fields:
  - =name= ::
  - =description= ::
  - =arguments= ::
  - =addons= ::
  - =kernel-arguments= ::
  - =swap-devices= ::
  - =packages= ::
  - =services= ::
  - =modifier= ::
- Special Form: this-operating-system-mod-arguments ::
- Function: modded-configuration-operating-system ::

The implementation for ~home-environment~ mods can be found in ~(my-guix home
mods)~.

- Data Type: home-environment-mod ::
  Fields:
  - =name= ::
  - =description= ::
  - =arguments= ::
  - =addons= ::
  - =packages= ::
  - =services= ::
  - =modifier= ::
- Special Form: this-home-environment-mod-arguments ::
- Function: modded-configuration-home-environment ::

** Mod arguments

Readers may have noticed the ~let-mod-arguments~ form in the
~file-system-management-mod~ example above.  This is how mods can define
parameters - akin to Guile's parameters - for configurations that can be
tweaked or must be explicitly declared by the user.

For example, let's say a user would like to configure a swapfile.  After
creating one, normally they would include something like the following in
their config to begin using it:

#+begin_src scheme
  (operating-system
    [...]
    (swap-devices
     (list (swap-space
             (target "FILE")
             (dependencies
              (filter (file-system-mount-point-predicate "/") file-systems)))))
    (kernel-arguments
     (list "resume=DEVICE"
           "resume_offset=OFFSET")))
#+end_src

Perhaps the user would like to group this configuration into a mod.
Converting something like this to a mod is not as straightforward, however,
due to swapfile configuration values being different per machine.  To account
for this, that user can define a mod argument with ~mod-argument~, and then
let-bind the argument values with ~let-mod-arguments~:

#+begin_src scheme
  (define-configuration/no-serialization swapfile-configuration
    (file string "Path to swapfile.")
    (device string "Device that swapfile is present on.")
    (offset string "Offset of swapfile."))

  (define swapfile-argument
    (mod-argument
      (keyword #:swapfile)
      ;; Don't set a default value; the user must specify a
      ;; swapfile-configuration in arguments if they include the swapfile mod.
      (description "Swapfile configuration.")))

  (define swapfile-mod
    (operating-system-mod
      (name 'swapfile)
      (description
       "Configures swapfile for the system.  See <info:guix#Swap Space> for more
  information.  If the setup script in this repository is used to set up the
  swapfile, it should output all the swapfile configuration information needed.

  The base operating system must include the swapfile file system
  configuration.")
      (swap-devices
       (let-mod-arguments (this-operating-system-mod-arguments)
           ;; base-configuration-argument is provided by (my-guix mods).
           ((base-configuration base-configuration-argument)
            (swapfile swapfile-argument))
         (match-record swapfile <swapfile-configuration> (file)
           (list (swap-space
                   (target file)
                   (dependencies
                    (filter (file-system-mount-point-predicate "/")
                            (operating-system-file-systems base-configuration))))))))
      (kernel-arguments
       (let-mod-arguments (this-operating-system-mod-arguments)
           ((swapfile swapfile-argument))
         (match-record swapfile <swapfile-configuration> (device offset)
           (list (string-append "resume=" device)
                 (string-append "resume_offset=" offset)))))))
#+end_src
(From [[file:modules/my-guix/mods/base.scm]].)

For convenience, the file, device, and offset are collected into a record type
that is expected as the argument.  To actually set values for mod arguments,
they are specified in the =arguments= field of ~modded-configuration~, as a
list of keyword arguments that correspond to the keywords set in
~mod-argument~ definitions.  The full ~modded-configuration~ from
[[file:modules/my-guix/systems/al-pc.scm]] looks like so:

#+begin_src scheme
  (define modded-operating-system
    (modded-configuration
      (arguments (list
                  #:swapfile (swapfile-configuration
                              (file "/swapfile")
                              (device "/dev/mapper/cryptroot")
                              (offset "6036736"))))
      (base base-operating-system)
      (mods (list meta-desktop-mod
                  meta-entertainment-mod
                  gnome-mod
                  nvidia-mod
                  ssh-server-mod))))
#+end_src

~(my-guix mods)~ provides facilities for using mod arguments, which are
documented below (WIP).

- Data Type: mod-argument ::
  Fields:
  - =keyword= ::
  - =default-value= ::
  - =sanitizer= ::
- Macro: let-mod-arguments ::
- Variable: base-configuration-argument ::
- Variable: ignored-mods-argument ::

* Services

** Hardware Services

The ~(my-guix services hardware)~ module provides services relating to
hardware.

*** ~keyboard-center-service-type~

This service adds udev rules necessary for the =keyboard-center= package to
work.

No configuration is available for this service, so the following should
suffice:

#+begin_src scheme
  (service keyboard-center-service-type)
#+end_src

* Home Services

The following sections document custom services used in home configurations.

** Package Management

The ~(my-guix home services package-management)~ module provides additional
services for package management.

*** ~home-flatpak-service-type~

This is the service type for configuring Flatpak. It expects a
~home-flatpak-configuration~ record as its value.

Only installation of flatpaks is supported to avoid accidental removals that
cause reinstallations. Although this service (mostly) works in its current
form, the interface is still experimental and will likely go through changes
to improve flexibility and capabilities.

To start using this service, it must be configured with at least one
remote. The following example configures Flatpak to use Flathub as a remote:

#+begin_src scheme
  (service home-flatpak-service-type
           (home-flatpak-configuration
            (remotes
             '(("flathub" "https://flathub.org/repo/flathub.flatpakrepo")))))
#+end_src

~home-flatpak-service-type~ may itself be extended to add applications to the
profile, but it can be fairly cumbersome having to specify
~home-flatpak-configuration~ every time. ~home-flatpak-profile-service-type~
is included as a shorthand service for specifying lists of application
specifications to include in the profile, that being ~(remote app-id)~. The
following declares the Firefox and Brave Browser flatpaks in the home
environment (assuming that Flathub is already configured as shown above):

#+begin_src scheme
  (simple-service 'home-flatpak-browsers
                  home-flatpak-profile-service-type
                  '(("flathub" "org.mozilla.firefox")
                    ("flathub" "com.brave.Browser")))
#+end_src

Note that on foreign systems, the Guix Flatpak package will fail to properly
run if CA certificates cannot be found, which can be a problem for first-time
reconfigures where certificates for Guix have not been set up yet (notably
=SSL_CERT_FILE=).  However, as long as the relevant variable and package(s)
are specified in the configuration, they will still be applied even if Flatpak
fails to run, so subsequent reconfigures should work as intended after
reloading the environment.

Guix System users should not have this problem since certificates should
already be properly set up by the time a home reconfigure takes place.
