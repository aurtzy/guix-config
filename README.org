#+title: guix-config

# Modular Guix configuration

* Introduction

[[https://guix.gnu.org][GNU Guix]] configuration files for my various systems. This config extends Guix
with a custom extension system (dubbed "mods") to modularize my setup.

This repository also includes additional packages and services that are either
being refined for upstreaming or are not suitable for upstream.

These configurations allow me to accomplish two main goals:

1. To have a bootstrapping mechanism for reliably (and to some extent,
   reproducibly) initializing environments with the software I use to manage
   my sibling project, which handles the organization and management of my
   data (a link to documentation about this will exist at some point in the
   future).
2. To enable the full power of an awesome, fully capable programming
   language - that is, [[https://www.gnu.org/software/guile][Guile]] - in order to build a robust, modular
   configuration that I can hack around with ease.

* Overview

Here is a general overview of this repository's layout:

- [[file:modules/][modules]] contains Guile modules which define all sorts of things, including
  the extensions system in the ~(my-guix mods)~ module, other utility
  functions, as well as packages and services.
- [[file:files/][files]] contains everything used in my configuration that isn't a Guile
  module. This includes the Guix Home/System configuration files for the
  various systems I manage, in addition to all of the "impure" files that
  aren't declared in Guile.
- [[file:guix-package-path/][guix-package-path]] is used primarily for the =GUIX_PACKAGE_PATH= variable,
  which enables Guix to see packages in this repository when doing
  package-related tasks like =guix search=.

  See the [[https://guix.gnu.org/en/manual/devel/en/html_node/Package-Modules.html][Package Modules]] section in the manual for more information about
  this variable.
- [[file:guix-with-env.scm][guix-with-env.scm]] is a script that runs =guix= with [[file:modules/][modules]] in the load
  path, helpful for cases where the load path gets broken or when initializing
  the system with Guix.
- [[file:setup.scm][setup.scm]] is another script for setting up various tasks during the
  installation phase of Guix System.

* Services

** Hardware Services

The ~(my-guix services hardware)~ module provides services relating to
hardware.

*** ~keyboard-center-service-type~

This service adds udev rules necessary for the =keyboard-center= package to
work.

No configuration is available for this service, so the following should
suffice:

#+begin_src scheme
  (service keyboard-center-service-type)
#+end_src

* Home Services

** Base Services

The ~(my-guix home services)~ module provides additional base services.

*** ~home-impure-symlinks-service-type~

This service is based off of Guix Home's ~symlink-manager~ service, except
that it is designed to work with symlinks outside of the store; hence,
"impure".

~home-impure-symlinks-service-type~ can be initialized and extended with a
list of symlink specifications. For example, the following extends the service
with symlinks at =$HOME/.config/emacs/init.el= and =$HOME/.bash_profile=
pointing to =$HOME/dotfiles/init.el= and =$HOME/dotfiles/.bash_profile=,
respectively:

#+begin_src scheme
  (simple-service 'home-impure-symlinks-dotfiles
                  home-impure-symlinks-service-type
                  `((".config/emacs/init.el"
                     ,(string-append
                       (getenv "HOME")
                       "/dotfiles/init.el"))
                    (".config/emacs/early-init.el"
                     ,(string-append
                       (getenv "HOME")
                       "/dotfiles/early-init.el"))
                    (".bash_profile"
                     ,(string-append
                       (getenv "HOME")
                       "/dotfiles/.bash_profile"))))
#+end_src

Optionally, file names can be specified after the source path to copy the
directory structure of the source path to the destination path (which are
implied to be directories in this case). For example, the following value is
equivalent to the extension value declared above:

#+begin_src scheme
  `((".config/emacs"
     ,(string-append
       (getenv "HOME")
       "/dotfiles")
     "init.el"
     "early-init.el")
    (""
     ,(string-append
       (getenv "HOME")
       "/dotfiles")
     ".bash_profile"))
#+end_src

** Package Management

The ~(my-guix home services package-management)~ module provides additional
services for package management.

*** ~home-flatpak-service-type~

This is the service type for configuring Flatpak. It expects a
~home-flatpak-configuration~ record as its value.

Only installation of flatpaks is supported to avoid accidental removals that
cause reinstallations. Although this service (mostly) works in its current
form, the interface is still experimental and will likely go through changes
to improve flexibility and capabilities.

To start using this service, it must be configured with at least one
remote. The following example configures Flatpak to use Flathub as a remote:

#+begin_src scheme
  (service home-flatpak-service-type
           (home-flatpak-configuration
            (remotes
             '((flathub
                . "https://flathub.org/repo/flathub.flatpakrepo")))))
#+end_src

~home-flatpak-service-type~ may itself be extended to add applications to the
profile, but it can be fairly cumbersome having to specify
~home-flatpak-configuration~ every time. ~home-flatpak-profile-service-type~
is included as a shorthand service for specifying lists of application
specifications to include in the profile, that being ~(remote app-id)~. The
following declares the Firefox and Brave Browser flatpaks in the home
environment (assuming that Flathub is already configured as shown above):

#+begin_src scheme
  (simple-service 'home-flatpak-browsers
                  home-flatpak-profile-service-type
                  '((flathub "org.mozilla.firefox")
                    (flathub "com.brave.Browser")))
#+end_src

Note that on foreign systems, the Guix Flatpak package will fail to properly
run if CA certificates cannot be found, which can be a problem for first-time
reconfigures where certificates for Guix have not been set up yet (notably
=SSL_CERT_FILE=).  However, as long as the relevant variable and package(s)
are specified in the configuration, they will still be applied even if Flatpak
fails to run, so subsequent reconfigures should work as intended after
reloading the environment.

Guix System users should not have this problem since certificates should
already be properly set up by the time a home reconfigure takes place.
